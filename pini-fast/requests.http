# Pini-Fast API - HTTP Requests Collection
# Base URL: http://localhost:8088
#
# Instructions:
# 1. Start the server: npm run dev
# 2. Use VSCode REST Client extension to send these requests
# 3. Update the @token variable after successful login
# 4. Admin users are managed through the role-based system
# 5. Default admin: admin@company.com / ChangeThisPassword123!

@baseUrl = http://localhost:8088
@token = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjBhbGt5bzZhMXI3Ym1kbjkzbDd4IiwiZW1haWwiOiJhZG1pbkBjb21wYW55LmNvbSIsInJvbGVzIjpbImFkbWluIl0sImlhdCI6MTc1MzcxOTQxMSwiZXhwIjoxNzUzODA1ODExfQ.LoEH8yjKvemtGnTYtnEye1PG-RRnlzv_f-e1KhmpdXQ

### ============================================================================
### HEALTH CHECK
### ============================================================================

### Health Check
GET {{baseUrl}}/health

### ============================================================================
### AUTHENTICATION ROUTES
### ============================================================================
### Login admin (default bootstrap admin)
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "admin@company.com",
  "password": "ChangeThisPassword123!"
}

### Register a new user (gets default "user" role)
POST {{baseUrl}}/api/auth/register
Content-Type: application/json

{
  "email": "user@test.com",
  "firstName": "John",
  "lastName": "Doe",
  "password": "password123"
}

### Register user with admin role (requires admin token)
POST {{baseUrl}}/api/auth/register
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "email": "newadmin@test.com",
  "firstName": "New",
  "lastName": "Admin",
  "password": "password123",
  "roles": ["admin"]
}

### Login regular user
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "user@test.com",
  "password": "password123"
}


### Get current user profile
GET {{baseUrl}}/api/auth/me
Authorization: Bearer {{token}}

### Refresh token
POST {{baseUrl}}/api/auth/refresh
Authorization: Bearer {{token}}

### Logout
POST {{baseUrl}}/api/auth/logout
Authorization: Bearer {{token}}

### ============================================================================
### USER MANAGEMENT ROUTES
### ============================================================================

### Get all users (public)
GET {{baseUrl}}/api/users

### Get user by ID (public)
GET {{baseUrl}}/api/users/0alkyo6a1r7bmdn93l7x

### Create user (admin only)
POST {{baseUrl}}/api/users
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "email": "newuser@test.com",
  "firstName": "Jane",
  "lastName": "Smith",
  "password": "password123"
}

### Update user (owner or admin)
PUT {{baseUrl}}/api/users/replace-with-actual-user-id
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "firstName": "Jane Updated",
  "lastName": "Smith Updated"
}

### Delete user (admin only)
DELETE {{baseUrl}}/api/users/replace-with-actual-user-id
Authorization: Bearer {{token}}

### Get own profile
GET {{baseUrl}}/api/users/me/profile
Authorization: Bearer {{token}}

### Update own profile
PUT {{baseUrl}}/api/users/me/profile
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "firstName": "Updated First Name",
  "lastName": "Updated Last Name"
}

### Get user roles (admin only)
GET {{baseUrl}}/api/users/USER_ID_HERE/roles
Authorization: Bearer {{token}}

### ============================================================================
### ROLE MANAGEMENT ROUTES (ADMIN ONLY)
### ============================================================================

### Get all roles
GET {{baseUrl}}/api/roles
Authorization: Bearer {{token}}

### Get role by ID
GET {{baseUrl}}/api/roles/ROLE_ID_HERE
Authorization: Bearer {{token}}

### Create new role
POST {{baseUrl}}/api/roles
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "moderator",
  "description": "Moderator with limited administrative access"
}

### Update role
PUT {{baseUrl}}/api/roles/ROLE_ID_HERE
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "updated-role",
  "description": "Updated role description"
}

### Delete role
DELETE {{baseUrl}}/api/roles/ROLE_ID_HERE
Authorization: Bearer {{token}}

### Assign role to user
POST {{baseUrl}}/api/roles/assign
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "userId": "USER_ID_HERE",
  "roleId": "ROLE_ID_HERE"
}

### Remove role from user
POST {{baseUrl}}/api/roles/remove
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "userId": "USER_ID_HERE",
  "roleId": "ROLE_ID_HERE"
}

### Get users with specific role
GET {{baseUrl}}/api/roles/ROLE_ID_HERE/users
Authorization: Bearer {{token}}

### ============================================================================
### PRODUCT MANAGEMENT ROUTES
### ============================================================================

### Get all products (public)
GET {{baseUrl}}/api/products

### Get product by ID (public)
GET {{baseUrl}}/api/products/replace-with-actual-product-id

### Get products by category (public)
GET {{baseUrl}}/api/products/category/electronics

### Get in-stock products (public)
GET {{baseUrl}}/api/products/stock/available

### Create product (admin only)
POST {{baseUrl}}/api/products
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Laptop Computer",
  "description": "High-performance laptop for professional use",
  "price": 1299.99,
  "category": "electronics",
  "sku": "LAP-001",
  "stockQuantity": 25,
  "imageUrl": "https://example.com/laptop.jpg"
}

### Create another product
POST {{baseUrl}}/api/products
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Wireless Mouse",
  "description": "Ergonomic wireless mouse with long battery life",
  "price": 29.99,
  "category": "electronics",
  "sku": "MOU-001",
  "stockQuantity": 100
}

### Update product (admin only)
PUT {{baseUrl}}/api/products/k0mbkjd64pmdnbajn2
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Updated Laptop Computer",
  "price": 1199.99,
  "stockQuantity": 30
}

### Update product stock (admin only)
PATCH {{baseUrl}}/api/products/k0mbkjd64pmdnbajn2/stock
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "quantity": 50
}

### Delete product (admin only)
DELETE {{baseUrl}}/api/products/replace-with-actual-product-id
Authorization: Bearer {{token}}

### ============================================================================
### FILE UPLOAD ROUTES
### ============================================================================

### Upload file (with authentication - tracks uploader)
POST {{baseUrl}}/api/files/upload
Authorization: Bearer {{token}}
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="file"; filename="test.txt"
Content-Type: text/plain

This is a test file content.
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### Upload file (without authentication - anonymous upload)
POST {{baseUrl}}/api/files/upload
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="file"; filename="anonymous.txt"
Content-Type: text/plain

This is an anonymous upload.
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### Download file (public)
GET {{baseUrl}}/api/files/3dgets4iun4mdn7l8rr/download

### Get user's files (authenticated)
GET {{baseUrl}}/api/files
Authorization: Bearer {{token}}

### Get file metadata (authenticated)
GET {{baseUrl}}/api/files/3dgets4iun4mdn7l8rr
Authorization: Bearer {{token}}

### Update file metadata (owner or admin)
PUT {{baseUrl}}/api/files/3dgets4iun4mdn7l8rr
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "originalName": "updated-filename.txt"
}

### Delete file (owner or admin)
DELETE {{baseUrl}}/api/files/replace-with-actual-file-id
Authorization: Bearer {{token}}

### Get file statistics (admin only)
GET {{baseUrl}}/api/files/stats/overview
Authorization: Bearer {{token}}

### Get all files (admin only)
GET {{baseUrl}}/api/files/admin/all
Authorization: Bearer {{token}}

### ============================================================================
### ERROR TESTING
### ============================================================================

### Test invalid login
POST {{baseUrl}}/api/auth/login
Content-Type: application/json

{
  "email": "nonexistent@example.com",
  "password": "wrongpassword"
}

### Test unauthorized access
GET {{baseUrl}}/api/users/me/profile

### Test invalid data
POST {{baseUrl}}/api/auth/register
Content-Type: application/json

{
  "email": "invalid-email",
  "password": "123"
}

### Test admin-only endpoint without admin role
POST {{baseUrl}}/api/products
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "Test Product"
}

### ============================================================================
### WORKFLOW EXAMPLES
### ============================================================================

### Workflow 1: Role-Based User Management
# 1. Login as admin (admin@company.com / ChangeThisPassword123!)
# 2. Create roles via POST /api/roles
# 3. Register users via POST /api/auth/register
# 4. Assign roles via POST /api/roles/assign
# 5. Manage user permissions

### Workflow 2: Complete Product Management
# 1. Login as admin to get JWT token
# 2. Create products via POST /api/products
# 3. Upload product images via POST /api/files/upload
# 4. Update inventory via PATCH /api/products/:id/stock
# 5. Manage product lifecycle

### Workflow 3: User File Upload and Management
# 1. Register/Login user
# 2. Upload files via POST /api/files/upload
# 3. Get file metadata via GET /api/files/:id
# 4. Download files via GET /api/files/:id/download
# 5. Update/delete files

### Workflow 4: Admin Operations
# 1. Login as admin
# 2. View all users and their roles
# 3. Create/manage roles and permissions
# 4. View file statistics via GET /api/files/stats/overview
# 5. Manage all files via GET /api/files/admin/all

### ============================================================================
### NOTES
### ============================================================================

# Authentication & Authorization:
# - JWT tokens expire in 24 hours (configurable via JWT_EXPIRES_IN)
# - Role-based access control with database-stored roles
# - Default admin user: admin@company.com / ChangeThisPassword123!
# - Default roles: admin, user, moderator
# - Admin privileges required for role management

# Role System:
# - Flexible role system supporting unlimited custom roles
# - Role assignments tracked with audit trail (who assigned, when)
# - Users can have multiple roles
# - Role-based middleware protects admin endpoints

# File Uploads:
# - Supported file types: jpg, jpeg, png, gif, pdf, doc, docx, txt (configurable)
# - Maximum file size: 10MB (configurable via MAX_FILE_SIZE)
# - Files stored in ./data/uploads/ directory

# Database:
# - SQLite database stored in ./data/database.sqlite
# - Schema includes: users, roles, user_roles tables
# - Foreign key relationships with cascading deletes
# - All data persists between server restarts

# Configuration:
# - Environment variables loaded from .env file
# - sample.env provided with all required variables
# - VS Code debugging fully supported
# - Check ConfigService for all configuration options

# Development:
# - Server runs on http://localhost:8088 by default
# - Use npm run dev for development with hot reload
# - Use VSCode REST Client extension for testing these requests
# - Dynamic route listing displays all available endpoints on startup